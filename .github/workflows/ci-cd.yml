name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

# ðŸ”§ PROJECT CONFIGURATION VARIABLES
# Change these values when copying to other projects
env:
  # Version configuration
  MAJOR_VERSION: '8'
  MINOR_VERSION: '0'
  
  # .NET configuration  
  DOTNET_VERSION: '8.0.x'
  NUGET_PROJECTS: 'SW.Surl.Sdk/SW.Surl.Sdk.csproj'  # Leave empty '' to skip NuGet publishing
  TEST_PROJECTS: '**/*UnitTests/*.csproj'
  RUN_TESTS: 'false'
  
  
  # Helm configuration
  CHART_NAME: 'surl'
  
  # Deployment configuration
  DEVELOPMENT_NAMESPACE: 'playground'
  
  # Registry configuration
  CONTAINER_REGISTRY: 'ghcr.io'
  
  # Computed values (don't change these)
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine semantic version
        id: semver
        uses: simplify9/.github/.github/actions/determine-semver@main
        with:
          major: ${{ env.MAJOR_VERSION }}
          minor: ${{ env.MINOR_VERSION }}
 
      - name: Tag new version on GitHub origin
        if: ${{ env.NUGET_PROJECTS != '' }}
        uses: simplify9/.github/.github/actions/tag-github-origin@main
        with:
          github-token: ${{ secrets.S9_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          tag: ${{ steps.semver.outputs.version }}
          sha: ${{ github.sha }}

  build:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dotnet Restore, Build, and Test
        uses: simplify9/.github/.github/actions/dotnet-build@main
        with:
          projects: "**/*.csproj"
          test-projects: ${{ env.TEST_PROJECTS }}
          configuration: "Release"
          dotnet-version: ${{ env.DOTNET_VERSION }}
          run-tests: ${{ env.RUN_TESTS }}

      - name: Pack and Push NuGet Package
        uses: simplify9/.github/.github/actions/dotnet-pack-push@main
        with:
          projects: ${{ env.NUGET_PROJECTS }}
          configuration: "Release"
          version: ${{ needs.version.outputs.version }}
          api-key: ${{ secrets.SWNUGETKEY }}
          nuget-source: 'https://api.nuget.org/v3/index.json'

  ci:
    runs-on: ubuntu-latest
    needs: version
    outputs:
      docker-image: ${{ steps.docker.outputs.image-tags }}
      helm-chart: ${{ steps.helm.outputs.chart-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push Docker image
        id: docker
        uses: simplify9/.github/.github/actions/docker-build-push@main
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          version: ${{ needs.version.outputs.version }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: './Dockerfile'
          context: '.'
          platforms: 'linux/amd64'

      - name: Package and push Helm chart
        id: helm
        uses: simplify9/.github/.github/actions/helm-package-push@main
        with:
          chart-name: ${{ env.CHART_NAME }}
          chart-path: './chart'
          version: ${{ needs.version.outputs.version }}
          registry: ${{ env.CONTAINER_REGISTRY }}
          repository: ${{ github.repository_owner }}/charts
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          image-repository: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}
          image-tag: ${{ needs.version.outputs.version }}
          update-image-values: 'true'

  deploy-development:
    runs-on: ubuntu-latest
    needs: [version, ci]
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.29.0'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.S9Dev_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config current-context
          
      - name: Login to Container Registry  
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.CONTAINER_REGISTRY }} --username ${{ github.actor }} --password-stdin
          
      - name: Prepare deployment variables
        id: vars
        run: |
          # Convert repository name to lowercase for container registry compatibility
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image-repository=${{ env.CONTAINER_REGISTRY }}/${REPO_LOWER}" >> $GITHUB_OUTPUT
          
          # Prepare Helm chart URL
          CHART_URL="oci://${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/charts/${{ env.CHART_NAME }}"
          echo "chart-url=${CHART_URL}" >> $GITHUB_OUTPUT
          
      - name: Deploy Helm Chart to Development
        run: |
          helm upgrade --install ${{ env.CHART_NAME }}-dev \
            ${{ steps.vars.outputs.chart-url }} \
            --version ${{ needs.version.outputs.version }} \
            --namespace ${{ env.DEVELOPMENT_NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 10m \
            --set image.repository=${{ steps.vars.outputs.image-repository }} \
            --set image.tag=${{ needs.version.outputs.version }} \
            --set ingress.enabled=true \
            --set replicas=1 \
            --set "ingress.hosts={surl.sf9.io}" \
            --set environment="Staging" \
            --set ingress.path="/api" \
            --set "ingress.tls[0].secretName=surl-tls" \
            --set db="${{ secrets.DBCS }}"


