name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  cicd:
    uses: simplify9/.github/.github/workflows/sw-cicd.yml@main
    with:
      # Version configuration
      major-version: '8'
      minor-version: '0'
      
      # .NET configuration
      dotnet-version: '8.0.x'
      nuget-projects: 'SW.Surl.Sdk/SW.Surl.Sdk.csproj'
      run-tests: 'false'
      
      # Docker configuration
      dockerfile-path: './Dockerfile'
      docker-context: '.'
      
      # Helm configuration
      chart-name: 'surl'
      chart-path: './chart'
      
      # Deployment configuration
      deploy-to-development: true
      development-namespace: 'playground'
      
      # Registry configuration
      container-registry: 'ghcr.io'

      # Helm deployment values  
      helm-set-values: 'ingress.enabled=true,replicas=1,ingress.hosts={surl.sf9.io},environment="Staging",ingress.path="/api",ingress.tls[0].secretName="surl-tls"'

      
    secrets:
      # NuGet secrets
      nuget-api-key: ${{ secrets.SWNUGETKEY }}
      nuget-source: 'https://api.nuget.org/v3/index.json'
      
      # Container registry (using GitHub packages)
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}
      
      # Kubernetes
      kubeconfig: ${{ secrets.S9Dev_KUBECONFIG }}
      
      # GitHub token for tagging
      github-token: ${{ secrets.S9_GITHUB_TOKEN }}

      # Helm secret values
      helm-set-secret-values: db="${{ secrets.DBCS_ESCAPED }}" 

  # Fallback deployment - only runs if the main cicd job fails
  deploy-development-fallback:
    runs-on: ubuntu-latest
    needs: cicd
    if: always() && needs.cicd.result == 'failure'
    environment: development
    
    env:
      # Configuration from main job
      CHART_NAME: 'surl'
      DEVELOPMENT_NAMESPACE: 'playground'
      CONTAINER_REGISTRY: 'ghcr.io'
      IMAGE_NAME: ${{ github.repository }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
          
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.S9Dev_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config current-context
          
      - name: Login to Container Registry  
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.CONTAINER_REGISTRY }} --username ${{ github.actor }} --password-stdin
          
      - name: Generate version for fallback deployment
        id: version
        run: |
          # Generate a simple version for fallback (you may want to adjust this logic)
          VERSION="8.0.${{ github.run_number }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
          
      - name: Prepare deployment variables
        id: vars
        run: |
          # Convert repository name to lowercase for container registry compatibility
          REPO_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "image-repository=${{ env.CONTAINER_REGISTRY }}/${REPO_LOWER}" >> $GITHUB_OUTPUT
          
          # Prepare Helm chart URL
          CHART_URL="oci://${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/charts/${{ env.CHART_NAME }}"
          echo "chart-url=${CHART_URL}" >> $GITHUB_OUTPUT
          
      - name: Deploy Helm Chart to Development (Fallback)
        run: |
          echo "üîÑ Main CI/CD job failed, deploying using fallback method..."
          echo "üöÄ Deploying application to development environment..."
          
          helm upgrade --install ${{ env.CHART_NAME }}-dev \
            ${{ steps.vars.outputs.chart-url }} \
            --version ${{ steps.version.outputs.version }} \
            --namespace ${{ env.DEVELOPMENT_NAMESPACE }} \
            --create-namespace \
            --wait \
            --timeout 10m \
            --set image.repository=${{ steps.vars.outputs.image-repository }} \
            --set image.tag=${{ steps.version.outputs.version }} \
            --set ingress.enabled=true \
            --set replicas=1 \
            --set "ingress.hosts={surl.sf9.io}" \
            --set environment="Staging" \
            --set ingress.path="/api" \
            --set "ingress.tls[0].secretName=surl-tls" \
            --set db="${{ secrets.DBCS_ESCAPED }}"
            
      - name: Verify fallback deployment
        run: |
          echo "üîç Verifying fallback deployment..."
          kubectl get pods -n ${{ env.DEVELOPMENT_NAMESPACE }} -l app.kubernetes.io/instance=${{ env.CHART_NAME }}-dev
          kubectl get services -n ${{ env.DEVELOPMENT_NAMESPACE }} -l app.kubernetes.io/instance=${{ env.CHART_NAME }}-dev